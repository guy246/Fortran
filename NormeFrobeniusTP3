!Soit n un entier non nul donn√©. La norme de Frobenius, not√©e ‚ÄñM‚Äñ, d‚Äôune matrice M œµ Mn√ón(R) est :
!‚ÄñM‚Äñ=‚àötr(Mùë°M) (2)
!o√π Mt est la matrice transpos√©e de M et
!tr(M)=‚àë mii, i=1
!est la trace de la matrice M.
!1. Ecrire un code en fortran permettant de calculer la norme de Frobenius d‚Äôune matrice carr√©e.

program NormeFrobeniusTP3
    implicit none
    integer :: n, i, j
    integer, dimension(:,:), allocatable :: M
    integer, dimension(:,:), allocatable :: Mt
    integer, dimension(:,:), allocatable :: Mm
    real :: norme
    write(*,*)
    !faire une matrice al√©atoire
    n = 3
    allocate(M(n,n))
    do i = 1, n
        do j = 1, n
            M(i,j) = floor((rand()*49)+1)
        end do
    end do
    !affciher cette matrice
    write(*,"('La matrice M est :')")
    do i = 1, n
        do j = 1, n
            write(*,"(4x,i4)",advance="no") M(i,j)
        end do
        write(*,*)
    end do
    write(*,*)

    !la matrice transpos√©e
    write(*,"('La matrice transpos√©e de M est :')")
    Mt=transpose(M)
    !afficher cette matrice
    do i = 1, n
        do j = 1, n
            write(*,"(4x,i4)",advance="no") Mt(i,j)
        end do
        write(*,*)
    end do
    write(*,*)

    !multiplier la matrice M par sa transpos√©e
    write(*,"('Le produit de M par sa transpos√©e est :')")
    Mm=matmul(M,Mt)
    !afficher cette matrice
    do i = 1, n
        do j = 1, n
            write(*,"(4x,i4)",advance="no") Mm(i,j)
        end do
        write(*,*)
    end do
    write(*,*)

    !calculer la trace de la matrice M mutipli√©e par sa transpos√©e
    norme = 0
    do i = 1, n
        norme = norme + Mm(i,i)
    end do
    !calculer la racine carr√©e de la trace
    norme = sqrt(norme)
    !afficher la norme de Frobenius
    write(*,*)
    write(*,"('La norme de Frobenius de M est : ',F6.2)") norme
    deallocate(M)   


end program NormeFrobeniusTP3
